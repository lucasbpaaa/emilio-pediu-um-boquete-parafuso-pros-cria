#Question 1:

def bfs(grafo, vertice_inicial):
    fila = [vertice_inicial]  # Cria uma lista para a travessia
    visitados = set([vertice_inicial])  # Cria um conjunto para os vértices já visitados
    ordem_visita = []  # Lista para guardar a ordem de visitação

    while fila:
        vertice_atual = fila.pop(0)  # Remove o primeiro elemento da fila
        ordem_visita.append(vertice_atual)  # Adiciona o vértice atual à lista de visitação

        # Percorre todos os vizinhos do vértice atual
        for vizinho in grafo[vertice_atual]:
            if vizinho not in visitados:
                visitados.add(vizinho)  # Adiciona o vizinho ao conjunto de visitados
                fila.append(vizinho)  # Adiciona o vizinho à fila

    return ordem_visita

''''
Exemplo, caso queira:
grafo = {
    0: [1, 2],
    1: [0, 3, 4],
    2: [0],
    3: [1],
    4: [1]
}

resultado = bfs(grafo, 0)
print(resultado)  
'''

#Question 2:

def busca_propriedade(G: dict, vertice_inicial, value):
    fila = [vertice_inicial]  # Começa com o vértice inicial
    visitados = set()  # Conjunto para armazenar os vértices visitados

    while fila:
        vertice_atual = fila.pop(0)  # Remove o primeiro vértice da fila

        if vertice_atual in visitados:
            continue

        if vertice_atual == value:  # Verifica se o vértice atual é o que procuramos
            return vertice_atual

        visitados.add(vertice_atual)

        for vizinho in G[vertice_atual]:
            if vizinho not in visitados:
                fila.append(vizinho)

    return None  # Retorna None se não encontrar o valor


''''
Exemplo, caso queira:

grafo = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B'],
    'F': ['C']
}

resultado = busca_propriedade(grafo, 'A', 'E')
print(resultado)  # Saída esperada: 'E'
'''


#Question 3:



def ilhas(matriz, centroide=False):
    """
    Função para encontrar as ilhas em uma matriz e, opcionalmente, calcular o centroide
    da maior e menor ilha.
    """
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, -1), (1, -1), (-1, 1)]
    explorados = []  
    ilhas = {}  # Para armazenar as ilhas encontradas
    count_ilhas = 0
    
    for i in range(len(matriz)):
        for j in range(len(matriz[0])):
            if matriz[i][j] == '1' and (i, j) not in explorados:
                fronteira = [(i, j)]
                ilha = []
                while fronteira:  # Explora a ilha atual
                    current_cell = fronteira.pop(0)

                    if current_cell not in explorados:
                        explorados.append(current_cell)
                        ilha.append(current_cell)

                    for dx, dy in directions:
                        nx, ny = current_cell[0] + dx, current_cell[1] + dy
                        
                        if 0 <= nx < len(matriz) and 0 <= ny < len(matriz[0]):
                            if matriz[nx][ny] == '1' and (nx, ny) not in explorados:
                                fronteira.append((nx, ny))
                
                # Adiciona a ilha encontrada na lista de ilhas
                ilhas[count_ilhas] = ilha
                count_ilhas += 1  # Incrementa o contador de ilhas

    if centroide:
        if count_ilhas > 0:
            maior = [0, len(ilhas[0])]
            menor = [0, len(ilhas[0])]
            for indice in ilhas.keys():
                if len(ilhas[indice]) > maior[1]:
                    maior = [indice, len(ilhas[indice])]
                elif len(ilhas[indice]) < menor[1]:
                    menor = [indice, len(ilhas[indice])]

            x_ma, y_ma = 0, 0
            x_me, y_me = 0, 0
            for celula in ilhas[maior[0]]:
                x_ma += celula[0]
                y_ma += celula[1]
            for celula in ilhas[menor[0]]:
                x_me += celula[0]
                y_me += celula[1]

            centroide_ma = [x_ma / len(ilhas[maior[0]]), y_ma / len(ilhas[maior[0]])]
            centroide_me = [x_me / len(ilhas[menor[0]]), y_me / len(ilhas[menor[0]])]

            print(f'O centróide da maior ilha é: {centroide_ma}')
            print(f'O centróide da menor ilha é: {centroide_me}')
        else:
            print('Não existem ilhas na matriz dada.')

    return count_ilhas

def ler_matriz_do_arquivo(nome_arquivo):
    """
    Lê o arquivo e retorna uma matriz com os dados.
    A matriz deve ser composta por números '1' e '0' separados por espaços.
    """
    matriz = []
    with open(nome_arquivo, 'r') as arquivo:
        for linha in arquivo:
            # Dividimos a linha por espaços e removemos a nova linha no final
            # Convertendo para uma lista de strings
            matriz.append(linha.split())
    return matriz

# Nome do arquivo que contém a matriz
nome_arquivo = 'matriz.txt'  # Substitua pelo caminho correto do arquivo

# Lê a matriz do arquivo
matriz = ler_matriz_do_arquivo(nome_arquivo)
# Exibe o número de ilhas encontradas e, se solicitado, os centroides
print(f'Número de ilhas encontradas: {ilhas(matriz, centroide=True)}')


#Question 4:

def ilhas(matriz, centroide=False):
    """
    Função para encontrar as ilhas em uma matriz e, opcionalmente, calcular o centroide
    da maior e menor ilha.
    """
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, -1), (1, -1), (-1, 1)]
    explorados = []  
    ilhas = {}  # Para armazenar as ilhas encontradas
    count_ilhas = 0
    
    for i in range(len(matriz)):
        for j in range(len(matriz[0])):
            if matriz[i][j] == '1' and (i, j) not in explorados:
                fronteira = [(i, j)]
                ilha = []
                while fronteira:  # Explora a ilha atual
                    current_cell = fronteira.pop(0)

                    if current_cell not in explorados:
                        explorados.append(current_cell)
                        ilha.append(current_cell)

                    for dx, dy in directions:
                        nx, ny = current_cell[0] + dx, current_cell[1] + dy
                        
                        if 0 <= nx < len(matriz) and 0 <= ny < len(matriz[0]):
                            if matriz[nx][ny] == '1' and (nx, ny) not in explorados:
                                fronteira.append((nx, ny))
                
                # Adiciona a ilha encontrada na lista de ilhas
                ilhas[count_ilhas] = ilha
                count_ilhas += 1  # Incrementa o contador de ilhas

    # Retorno dos centroides das ilhas maior e menor
    centroide_ma = centroide_me = None

    if centroide:
        if count_ilhas > 0:
            maior = [0, len(ilhas[0])]
            menor = [0, len(ilhas[0])]
            for indice in ilhas.keys():
                if len(ilhas[indice]) > maior[1]:
                    maior = [indice, len(ilhas[indice])]
                elif len(ilhas[indice]) < menor[1]:
                    menor = [indice, len(ilhas[indice])]

            x_ma, y_ma = 0, 0
            x_me, y_me = 0, 0
            for celula in ilhas[maior[0]]:
                x_ma += celula[0]
                y_ma += celula[1]
            for celula in ilhas[menor[0]]:
                x_me += celula[0]
                y_me += celula[1]

            # Calcula o centroide (média das coordenadas)
            centroide_ma = [x_ma / len(ilhas[maior[0]]), y_ma / len(ilhas[maior[0]])]
            centroide_me = [x_me / len(ilhas[menor[0]]), y_me / len(ilhas[menor[0]])]

            print(f'O centróide da maior ilha é: {centroide_ma}')
            print(f'O centróide da menor ilha é: {centroide_me}')
        else:
            print('Não existem ilhas na matriz dada.')

    return count_ilhas, centroide_ma, centroide_me

def ler_matriz_do_arquivo(nome_arquivo):
    """
    Lê o arquivo e retorna uma matriz com os dados.
    A matriz deve ser composta por números '1' e '0' separados por espaços.
    """
    matriz = []
    with open(nome_arquivo, 'r') as arquivo:
        for linha in arquivo:
            # Dividimos a linha por espaços e removemos a nova linha no final
            # Convertendo para uma lista de strings
            matriz.append(linha.split())
    return matriz

# Nome do arquivo que contém a matriz
nome_arquivo = 'matriz.txt'  # Substitua pelo caminho correto do arquivo

# Lê a matriz do arquivo
matriz = ler_matriz_do_arquivo(nome_arquivo)

# Exibe o número de ilhas encontradas, e as coordenadas dos centroides
num_ilhas, centroide_maior, centroide_menor = ilhas(matriz, centroide=True)

print(f'Número de ilhas encontradas: {num_ilhas}')
print(f'Coordenadas do centróide da maior ilha: {centroide_maior}')
print(f'Coordenadas do centróide da menor ilha: {centroide_menor}')



#Question 5:

def lago(matriz):
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, -1), (1, -1), (-1, 1)]  # Cima, baixo, esquerda e direita
    explorados = []
    linhas, colunas = len(matriz), len(matriz[0])
    
    # Verificar cada célula da matriz
    for i in range(linhas):
        for j in range(colunas):
            # Se encontramos uma célula de água não explorada
            if matriz[i][j] == 0 and (i, j) not in explorados:
                # Usar uma fila para a busca em largura
                fronteira = [(i, j)]
                explorados.add((i, j))
                is_lake = True  # Assume que é um lago, até que se prove o contrário

                while fronteira:
                    x, y = fronteira.pop(0)

                    # Se a região de água tocar a borda da matriz, não é um lago
                    if x == 0 or y == 0 or x == linhas - 1 or y == colunas - 1:
                        is_lake = False
                    
                    for dx, dy in directions:
                        nx, ny = x + dx, y + dy
                        
                        # Verificar se a célula adjacente está dentro dos limites
                        if 0 <= nx < linhas and 0 <= ny < colunas:
                            # Se a célula adjacente é água e ainda não foi explorada
                            if matriz[nx][ny] == 0 and (nx, ny) not in explorados:
                                explorados.add((nx, ny))
                                fronteira.append((nx, ny))
                
                # Se encontramos uma região de água que é um lago, retornamos True
                if is_lake:
                    return True

    return False  # Não encontrou nenhum lago
